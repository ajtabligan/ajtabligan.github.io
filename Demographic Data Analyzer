import pandas as pd


def calculate_demographic_data(print_data=True):
    # Read data from file (The file is the adult.data.csv)
    df = pd.read_csv("") #modify file path as necessary

    # How many of each race are represented in this dataset? This should be a Pandas series with race names as the index labels.
    race_count = df["race"].value_counts()

    # What is the average age of men?
    average_age_men = round(df[df["sex"] == "Male"]["age"].mean(), 2)

    # What is the percentage of people who have a Bachelor's degree? (Not included those higher to Bachelor's degree)
    percentage_bachelors = (round(df[df["education"] == "Bachelors"].shape[0] / df.shape[0] * 100, 2))

    # What percentage of people with advanced education (`Bachelors`, `Masters`, or `Doctorate`) make more than 50K?
    
    # What percentage of people without advanced education make more than 50K?

    # with and without `Bachelors`, `Masters`, or `Doctorate`
    higher_education = df[(df['education'] == "Bachelors") | (df['education'] == "Masters") | (df['education'] == "Doctorate")]
    lower_education = df[~(df['education'] == "Bachelors") & ~(df['education'] == "Masters") & ~(df['education'] == "Doctorate")]

    # percentage with salary >50K
    higher_education_rich = (round(higher_education[higher_education["salary"] == ">50K"].shape[0] / higher_education.shape[0] * 100, 2))
    lower_education_rich = (round(lower_education[lower_education["salary"] == ">50K"].shape[0] / lower_education.shape[0] * 100, 2))

    # What is the minimum number of hours a person works per week (hours-per-week feature)?
    min_work_hours = df["hours-per-week"].min()

    # What percentage of the people who work the minimum number of hours per week have a salary of >50K?
    
    #Coder's note: Choose the rows w/ minimum HPW (a = df[df["hours-per-week"] == min_work_hours]) 
    #then choose rows with salary >50K (a[a["salary"] == ">50K"])
    num_min_workers = df[df["hours-per-week"] == min_work_hours][df[df["hours-per-week"] == min_work_hours]["salary"] == ">50K"]
    
    rich_percentage = (round(num_min_workers.shape[0] / df[df["hours-per-week"] == min_work_hours].shape[0] * 100, 2))

    # What country has the highest percentage of people that earn >50K?
    #Coder's note: highest percentage = 
    
    highest_earning_country_percentage = ((df[df["salary"] == ">50K"]["native-country"].value_counts() / df["native-country"].value_counts()).max())
    series_for_percentages = df[df["salary"] == ">50K"]["native-country"].value_counts() / df["native-country"].value_counts()
    highest_earning_country = series_for_percentages[series_for_percentages == highest_earning_country_percentage].index[0]
    highest_earning_country_percentage = (round(highest_earning_country_percentage, 2) * 100)
    
    # Identify the most popular occupation for those who earn >50K in India.
    list_of_possible = df[(df["native-country"] == "India") & (df["salary"] == ">50K")]["occupation"].value_counts()
    top_IN_occupation = list_of_possible[list_of_possible == list_of_possible.max()].index[0]

    # DO NOT MODIFY BELOW THIS LINE

    if print_data:
        print("Number of each race:\n", race_count) 
        print("Average age of men:", average_age_men)
        print(f"Percentage with Bachelors degrees: {percentage_bachelors}%")
        print(f"Percentage with higher education that earn >50K: {higher_education_rich}%")
        print(f"Percentage without higher education that earn >50K: {lower_education_rich}%")
        print(f"Min work time: {min_work_hours} hours/week")
        print(f"Percentage of rich among those who work fewest hours: {rich_percentage}%")
        print("Country with highest percentage of rich:", highest_earning_country)
        print(f"Highest percentage of rich people in country: {highest_earning_country_percentage}%")
        print("Top occupations in India:", top_IN_occupation)

    return {
        'race_count': race_count,
        'average_age_men': average_age_men,
        'percentage_bachelors': percentage_bachelors,
        'higher_education_rich': higher_education_rich,
        'lower_education_rich': lower_education_rich,
        'min_work_hours': min_work_hours,
        'rich_percentage': rich_percentage,
        'highest_earning_country': highest_earning_country,
        'highest_earning_country_percentage':
        highest_earning_country_percentage,
        'top_IN_occupation': top_IN_occupation
    }
